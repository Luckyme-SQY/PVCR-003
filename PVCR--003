#定义好训练、验证和预测模块
def train(train_loader,model,criterion,optimizer):
    #切换模型为训练模式
    model.train()
    train_loss=[]
    
    for i,(input,target) in enumerate(train_loader):
        c0,c1,c2,c3,c4=model(input)
        target=target.long()
        loss=criterion(c0,target[:,0])+\
                criterion(c1,target[:,1])+\
                criterion(c2,target[:,2])+\
                criterion(c3,target[:,3])+\
                criterion(c4,target[:,4])
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        if i%100==0:
            print(loss.item())
            train_loss.append(loss.item())
    return np.mean(train_loss)

def validate(val_loader,model,criterion):
    #切换模型为训练模式
    model.eval()
    val_loss=[]
    
    with torch.no_grad():
        for i,(input,target) in enumerate(val_loader):
            c0,c1,c2,c3,c4=model(input)
            target=target.long()
            loss=criterion(c0,target[:,0])+\
                  criterion(c1,target[:,1])+\
                  criterion(c2,target[:,2])+\
                  criterion(c3,target[:,3])+\
                  criterion(c4,target[:,4])
       
            val_loss.append(loss.item())
    return np.mean(val_loss)


def predict(test_loader,model,tta=10):
    model.eval()
    test_pred_tta=None
    
    #TTA次数
    for _ in range(tta):
        test_pred=[]
        with torch.no_grad():
            for i,(input,target) in enumerate(test_loader):
                c0,c1,c2,c3,c4=model(input)
                output=np.concatenate([
                        c0.data.numpy(),
                        c1.data.numpy(),
                        c2.data.numpy(),
                        c3.data.numpy(),
                        c4.data.numpy()],axis=1)
                test_pred.append(output)
                    
        test_pred=np.vstack(test_pred)
        if test_pred_tta is None:
            test_pred_tta=test_pred
        else:
            test_pred_tta+=test_pred
            
    return test_pred_tta
            
            
            
            #迭代训练和验证模型
model=SVHN_Model1()
criterion=nn.CrossEntropyLoss()
optimizer=torch.optim.Adam(model.parameters(),0.001)
best_loss=1000.0

for epoch in range(2):
    train_loss=train(train_loader,model,criterion,optimizer)
    val_loss=validate(val_loader,model,criterion)
    val_label=[''.join(map(str,x)) for x in val_loader.dataset.img_label]
    val_predict_label=predict(val_loader,model,1)
    val_predict_label=np.vstack([
        val_predict_label[:,:11].argmax(1),
        val_predict_label[:,11:22].argmax(1),
        val_predict_label[:,22:33].argmax(1),
        val_predict_label[:,33:44].argmax(1),
        val_predict_label[:,44:55].argmax(1),
        
    ]).T
    
    val_label_pred=[]
    for x in val_predict_label:
        val_label_pred.append(''.join(map(str,x[x!=10])))
    
    val_char_acc=np.mean(np.array(val_label_pred)==np.array(val_label))
    
    print('epoch:{0},train loss:{1}\t val loss:{2}'.format(epoch,train_loss,val_loss))
    print(val_char_acc)
    #记录下验证集精度
    if val_loss<best_loss:
        best_loss=val_loss
        torch.save(model.state_dict(),'./model.pt')
